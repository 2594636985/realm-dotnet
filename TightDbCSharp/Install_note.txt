*THIS BINDING IS STILL IN ALPHA DO NOT USE IN PRODUCTION*

*these instructions are preliminary and subject to change*

*these instructions are for people who just want to try out the binding*



The Archive in this directory contains the files needed for the C# binding.
to install, simply follow these instructions :

1) Create a directory somewhere on Your computer

2) extract all files in this archive into that directory

3) The extracted files will be organized in a BIN directory and a DLL directory
   The files in the DLL directory must be copied to the directory of the application that
   You want to be set up to use tightdb:

*  right click your C# project.
 
*  select properties

*  select build

*  scroll doun, locate Output path, note down the directory stated there. e.g. bin\Debug

*  right click the project in solution explorer and select open folder in file explorer.

*  go to the directory noted just before, e.g. bin\Debug

*  copy the 4 files from the archive dll directory into this directory

*  repeat for every build configuration in this project.

   A bit of an explanation :

   the c# project file structure is determined by whoever set up the c# project so it's not possible 
   to give a foolproof set of instructions on how to proceed, however this is always true :

   the output directory for 32bit debug   builds should have the tightdb_c_cs201232d.dll file
   the output directory for 32bit release builds should have the tightdb_c_cs201232r.dll file
   the output directory for 64bit debug   builds should have the tightdb_c_cs201264d.dll file
   the output directory for 64bit release builds should have the tightdb_c_cs201264r.dll file
   the output directory for AnyCpu debug  builds should have the tightdb_c_cs_201232d.dll file
   the output directory for AnyCpu debug  builds should have the tightdb_c_cs_201264d.dll file
   (so anycpy builds need both dll's as the bitness is first determined at runtime)
   the output directory for AnyCpu release builds should have the tightdb_c_cs_201232r.dll file
   the output directory for AnyCpu release builds should have the tightdb_c_cs_201264r.dll file

   If you copy all 4 dll files into a C# output directory, the resulting application will always work
   fine regarding the tightdb binding, as the binding determines what dll is needed and loads that
   name automatically. so a simple way of making things work in a test setting is just to copy all 4
   dll files to all the output directories of the projects using C# bindings. 



4) In the VS2012 C# solution where You would like to use tightdb, do the following :

* Right click the C# project that should use tightdb, select properties

* select Add Reference, then navigate to the extracted files from 2), and select the 
bin\Debug\TightDbCSharp.dll file

  This sets up Your project to be able to reference the TightDb binding.


* in the sourcefile where You intend to call tightdb, add this in the list of includes :

#include TightDbCSharp
#include TightDbCSharp.Extensions

To see if things work, try to add this line in Your sourcecode :

Console.Writeline(New Table().Size);

If things work, this line above will print 0 when run.

If things does not work, you will likely get a DLL not found error, or an exception. Check that You
have copied the dll's from the archive into the project output directory that is in use

