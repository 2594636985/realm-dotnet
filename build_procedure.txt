
Check out README.md for a concise version of this.
This document adds some thoughts and details, but README.md is good enough if You just want to build a version of the binding


(windows) : 

TightDB developer : 

has windows 7 and VS2012  ultimate installed in newest versions
builds tightdb core static libaries (manually, no documentation exists)
uses build.bat(being reviewed by brian at the moment, so not in our main branch) to make tightdb c++ binding static library release (static library .lib files and header files)

TightDB C# language binding developer (tightdb c dll part ):
has windows 7 and VS2012 ultimate installed in newest versions
uses tightdb c++ static binding release
builds a set of c dll files which contains tightdb C API for the C# language binding
uses build.bat to make a tightdb c dll release (various dll files,debug/release/32/64bit)

TightDB language binding developer (C# part)
has windows 7 and VS2012 ultimate installed in newest versions
(VS2012 express is sufficient for C# builds, but unit tests and code analysis and profiling is not supported in the free version, so 3rdparty stuff is needed.)
builds C# assembly, which contains binding API library to be used by customer .net developers
uses build.bat to create c# assembly release, meant to be used by customer C# and .net developers
only uses the c dll's for running usecases and for testing. c dll is not used to build the C# part of the binding itself

customer developer using tightdb C# .net language binding
has at least VS2012 express C# installed, and windows 7 - new versions
uses our C# API library
-our C# API library must include stuff so that the customer developer can debug and run on his own machine, even though he has no VS2012 c++ compiler installed
Builds his own application
creates his own application release, which must contain enough stuff so that his own application can run (C# and .net stuff) , as well as our binding (C# and c++ stuff) we have to supply him with files and documentation on how to to add whatever is needed by our c++ dll and our assembly to get them working. We need to test if anything is needed, like c++ runtime libraries for vs2012 c++


end customer
Has windows 7
installs customer developers' deployment
runs customer developers program, which in turn calls our assembly which in turn calls our c++ dll.
we should inform our customer developer how to correctly deploy anything we ourself depend upon.



End customer do not have VS installed, do not neccesarily have .net installed, do not neccessarily have an english windows, could run 32 or 64 bits, or in a virtual box. Probably runs a configuration very different from custom developer. Do not have pkzip or rar installed.

As we don't really control the method of deployment from customer developer to end customer, we should try to leave all options open for customer developer regarding method of deployment. It would be nice if we leave customer developer with just the raw files needed for deployment, as well as a few tips as how to do it easily, given he has VS2012

The procedure below is a raw-file solution to all deployments above. 



This will likely be the base for creating more advanced kinds of deployments. It is work in progress, and does not handle all situations, for example installation of c++ reddistributables that are neccessary for customer developer to install, if he only has VS2012 C# express and no c++. 

config lib info

todo : batch fil der laver 3 pakker til customer developer
todo : build time valg af dll filnavn sæt udfra den compiler der builder
todo : generelt eliminer så meget som muligt manuelt.
todo : fjern diverse filer fra arkiver som ikke skal bruges.
todo : anvisninger til customer developer vedr. at få installeret c++ redistributables så han kan køre uden at have VS2012 c++ installeret
todo : anvisninger til customer developer så han kan lave en distribution der ikke kræver at vs2012 c++ redistributables er installeret hos hans slutbruger
todo : VS2012 kan ikke installeres på windows vista, så vi understøtter pt ikke customer developers, der af en eller anden syg årsag udvikler på operativsystemer ældre end windows 7.



PS. Dette er nedskrevede arbejdsgange fra allerførste forsøg på at bygge en helt uafhængig applikation fra grunden af, det bliver meget nemmere meget snart.

Generelt.. hvor der er en .sln fil, er der også en build.bat som p.t. varetager at bygge en distribution/release udfra el allerede builded solution.


Total build af C# binding, helt fra grunden foregår i step-1 til step-3

Test af denne build med en hello world foregår i step-4 og step-5

Denne beskrivelse er en lille smule outdated, men burde være en god guide i forhold til ingenting.

Step-1  byg VS2012 c++ binding distribution med statiske libraries med tightdb core og headerfiler

0) du skal have en VS2012 der er bedre end VS2012 Express - express har toolset problemer med 64 bit når du bygger c++ projekter, og build af core virker ikke p.t. altid med vs2012 Express.

1) hent master tightdb fra github - placer i xyz\tightdb

2) build de 4 static libraries i vs2012 :
* start VS2012 ved at klikke på TightDB.sln
* I solution explorer, højreklik TightDB solution, vælg update vc++ projects. klik update i den dialog der fremkommer
* vælg menu->build->batch build, select de 4 static library tightdb builds, vælg clean
* vælg menu->build->batch build, select de 4 static library tightdb builds, vælg rebuild

3) kør build.bat

* brug explorer til at se tightdb directoriet, dobbeltklik build.bat

I release\vs2012\release finder du herefter filerne der skal bruges af VS2012 c++ binding brugere 




step-2  byg c delen af tightdb .net binding med VS2012 c++

xyz er det directory du normalt checker tightdb github ting ud i 

1) hent tightdb_csharp master, placer i xyz\tightdb_csharp

2) installer c++ binding distributionen : extract arkivet fra step-1 3) ind i kataloget xyz\tightdb_csharp\libsVS2012

* Kan gøres ved at kopiere tightdb\release\vs2012\files\*.* til tightdb_csharp\libsVS2012\*.*

3) åbn xyz\tightdb_csharp\native\tightdb_c_cs2012\tightdb_c_cs2012.sln

4) build->batch build->marker de 4 nederste configurations, tightdb_c_cs2012 og vælg clean
build->batch build->marker de 4 nederste configurations, tightdb_c_cs2012 og vælg rebuild

5) kør build.batch

kataloget xyz\tightdb_csharp\native\tightdb_c_cs2012\tightdb_c_cs2012\release\release indeholder
en release af windows C dll tightdb interfacet - dette interface kan bruges af alle windows sprog,
hvis der laves en sprog specifik binding.




step-3 byg tightdb_csharp delen af bindingen

gå til xyz\tightdb_csharp\TightDbCSharp

1) åbn TightDbCSharp.sln

2) build->batch build->marker begge to->rebuild

3) kør build.bat

xyz\tightdb_csharp\TightDbCSharp\release\kataloget er C# binding distributionen




Nu har du 3 arkiver :

A) c++ binding distributionen 
B) c API distributionen       
C) C# binding distributionen  




step-4 lav et testprojekt, svarende til hvis du havde et eksisterende projekt der skulle bruge tightdb


Denne gennemgang opretter et helt nyt C# console program i VS2012


1) lav tomt program

start VS2012 og vælg new project
vælg Other langauges->Visual C#
vælg Console  Application
vælg foreslåede placering, hvilket er et eller andet sted i dit windows user directory.


Sanity-check
Build->batch build og byg begge versioner (som begge er Any CPU)
klik på start for at køre den helt tomme applikation
et commandline vindue burde gerne dukke op meget kort tid,og forsvinde igen



2) udvid med en Hello, World agtig pause

(program.cs burde være fremme på skærmen, ellers ConsoleApplcation1->Program.CS i solution explorer)
tilføj følgende linie i Program.cs efter linien med { i static void Main 

            Console.WriteLine("Press any key to finish test... ");
            var ki = Console.ReadKey();


sanity-check
klik start og noter at nu bliver vinduet stående indtil man klikker på det og trykker en tast.
klik på programvinduet og tryk en tast for at lukke programmet igen






Så skal vi ha' brugt TightDB i vores projekt.




step-5 tilpas eksisternede projekt til at bruge tightdb

(dette eksempel fortsætter i VS2012 med programmet fra step-4)

1) højreklik ConsoleApplcation1 solution i solution explorer og vælg "open solution directory in explorer)

2) installer filer til brug for at benytte C# delen af bindingen

 i et andet explorer vindue finder du frem til arkiv C , som du lavede i step-3
det burde hedde Tightdb_csharp-bin-yyyy-mm-dd-hh-mm-builder.zip og det bør indeholde en træstruktur med filer i, hvor roden hedder bin.

pak hele arkivet ud i kataloget OVER det katalog der indeholder testprogrammet, eks hos mig er testprojektet 

C:\Users\wincoder\Documents\visual studio 2012\Projects\ConsoleApplication1
så pak ud i C:\Users\wincoder\Documents\visual studio 2012\Projects\



3) installer filer til brug for at C# bindingen kan kalde c++ bindingen

I andet (end ovenstående) explorer vindue finder du frem til arkiv B, som du lavede i step-2
det burde hedde noget i retning af tightdb_c_cs2012-2013-06-18-18-51-DFBUILD.rar

extract alle filer i arkivet der slutter på r.dll til kataloget consoleapplication1\bin\Release
extract alle filer i arkivet der slutter på d.dll til kataloget consoleapplication1\bin\debug

(dette vil snarst blive fixet i form af build og build-compiler-awareness i koden)
rename alle filerne du lige har kopieret, der slutter på 2012xxr i x64\release til ikke at indeholde 2012 og ikke at slutte på r
rename alle filerne du lige har kopieret, der slutter på d i x64\release til ikke at indeholde 2012 og ikke slutte på d


4) i ConsoleApplication højreklikker du references og vælger 
add reference
klik browse
naviger til ConsoleApplcation1\..\bin\debug  (vær forsigtig)  find TightDbCSharp.dll vælg den, klik add

5) sanity check. Vælg build->build all. skulle meget gerne stadig builde
6) sanity check. kør programmet. Det burde stadig køre præcist som før

7) tilføj i Program.cs
på linie 6 skriver du 
using TightDbCsharp
på linien før console.WriteLine("press any key to finish") skriver du :
            var t = new Table("test".Int());
            Console.WriteLine(t.Size);

8) nu kan du køre programmet, og det vil skrive 0 i linien over Press any key to finish test
Programmet kan køres både i debug og release mode.





step-6


deployment af eget program, som bruger tighdb C# binding :

1) hvis du vil installere dit smarte consoleapplication program et andet sted, kan du bare kopiere hele dit programs Debug eller hele dets Release katalog, og starte ConsoleApplication1.exe så virker det hele, maskinen skal blot have en version af .net installeret der er stor nok til at kunne køre programmet.
tightdb filerne er allerede at finde i dit debug eller release katalog.

Bemærk specielt at programmet kan køre på både 32 og 64 bit med samme exefil (med mindre du laver specifikke 32 og 64 bit builds - så skal du bare kopiere dll'erne ned i disse nye builds' output dirs, ved at gentage punkt 3


Jeg skal have checket tightdb c++ dll'erne for dependencies med STL library filer eller andet, som evt. også skal installeres med. Målet er slet ikke at have noget OS specifikt i C++ dll'en. Måske er vi allerede nået dertil. Dog ser det ud til at tightdb c++ binding bruger microsoft dll'er, som jeg ikke har helt styr på, om altid findes på en enduser maskine. Dette er egentlig i første omgang en opgave for c++ bindingen (at sikre at der er dokumentation for hvilke ting en pc skal have før den kan køre noget der bruger tightdb core libraries)

