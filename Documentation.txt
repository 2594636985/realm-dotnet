High level Binding documentation.

Installing all prerequesites for development is described in the section prereqesites.
we expect you to have installed all prerequesites in the rest of the documentation, so go get those things installed now..

How to Build is described in Readme.MD

How to test is described in Readme.MD

How to add a unit test case is described in the section Adding A Unit Test Case.

How to add a new public method is described in the section Add New Public Method.

How to add a new public method that calls into c++ core is described in the section Add New Functionality

How to add a new wrapper for a new core class is described in the secton Adding a New Wrapper

How to add a new .net version is described in the section Adding a new .net version

How to do a coverage test is described in the section Coverage Testing

How to do static checking is described in the Static Checking section.



#prereqesites

Before You can develop the C# binding, and core, You should have the following software installed :

Windows 7 64 bit  (Alternatively Windows 8, but I haven't tested that - vista will NOT work bc of VS12 not running on vista)
VS2012 Ultimate
GitExtensions
Visual Leak Detector
NUnitLite
Resharper
Dotcover
Please update all this to newest version, install all updates etc. etc. Everything is available in evaluation versions


#Adding a unit test
!In general, one test file per wrapper class
!We try to have all user facing methods covered by at least one unit test (resharper will then stop complaining that the method is never called in the solution)
!we try to have all c++ calling methods being covered by at least one unit test (can be verified with dotcover)
-Add a new class, to the project TightDbCSharpTest
-Copy the code over from one of the other test files (spectest is very small) and replace the testfeature class name to the name of the new test
-In the TEST project, add existing, point to the test file, select ADD AS LINK (important)

#Adding a new public method
This example is about adding a method to tableview and table, a method that does not call back into core
-in TightDBCSHarp project, open TableOrView
- create a method internal abstract NewStuffNoCheck(parametres)
- create a method public NewStuff(parametres)
- create a method verifyStuff(parametres)
NewStuff is the user facing function
VeryfyStuff should be called by NewStuff before it calls on to NewStuffNoCheck
NewStuffNoCHeck should do the actual work or calculation - The work is probably different between table and tableview so should be implemented in both Table.cs and TableView.cs
VerifyStuff should verify the parametres and throw exceptions if a call with these parametres is not legal. It should call other verify methods in case some of the verification is generic (like verifyColumnIndex(columnIndex)

#Adding a new public method that calls into c++
- Same as Adding a new public method, but the NewStuffNoCheck method must be extended with one or more calls into UnsafeNativeMethods
- in UnsafeNativeMethods write up the code for an interopcall as two static exter methods (64,32bit - follow the pattern seen everywhere)
- in unsafeNativeMethods create a static method that takes a C# wrapper and C# friendly parameter types and do the job by calling the extern methods
- Take a look at existing code for patterns about marshalling various C# types to c++. Each type has its own pattern that is used throughout. Non blittable types have functions on the C# side, and on the c++ side that transform them. Be aware that the pattern for getting strings back from c++ is a bit complex
- If needed, add the receieving call to the c++ dll in native\tightdb_c_cs\tightdb_c_cs2012.cs
- see the build section on how to build. Basically, build the c++ program, run the release script at the c++ solution, then build C# and then You can debug the C# part. You will need to build all before debug will use your new c# code, automatic rebuild is broken


#how to add a new wrapper class
- figure what type of TightDBHandle matches the new class (always root(inherit from TightDbHandle), sometimes root(Inherit from TightDbHandleOptionalUnbind))
- Create New Handle class
- Implement an empty constructor to enable interop to instantiate the wrapper class automatically (If You forget, You get a weird method missing exception when using it)
- override Unbind and put in a call to deallocate
- in UnsafeNativeMethods, add the interop stuff, then add a small method that the handle can call to get an IntPtr with the c++ handle (see existing how its done)
- in the Handle class of the TightDbHandle type that instantiates this new handle, add a method that returns this kind of handle (like TableHandle.TableWhere())
- in the C# wrapper class that should produce the new type, add a method that returns a C# wrapper with the handle inside, set by using SetHandle (see existing on how its done)

#Add a New .net version
- Each .net version supported has its own project, where all the files are added as link, into the TightDbCSharp project. The TightDbCSharp project is with the newest supported .net and VS, so the procedure for adding  .net 4.51 would be

- Add a new project 4.50 to the solution (Not 4.51 - we wil upgrade TightDbCSharp project to 4.51 as it is always the newest)
- Set .net version to 4.50 in that project
- Add references to files and stuff, exactly like the .net 4.0 project - same files all over, remember to set properties correctly for things other than C# files (copying settings etc.), remember .cs files are add as link 
- Add a new test project 4.50 to the solution
- set .net version to 4.50 in that project
- Add references exactly like the other test projects (remember add as link)
- Change TighDbCSharp up to 4.51 from 4.50
- test build, run unit tests, look for warnings etc.

#Coverage Testing
right click TEST project, select "cover unit tests with dotcover"
(You need to have DotCover installed of course)


#Static Checking
-build all, tick all and select build all
-in "Solution Explorer" in tab code Analysis , there will be the results for all code analysis using microsoft's fxcop
-in Resharper->Inspect->Code issues in solution, there will be the results for alle code analysis using resharper
In general strive to have no warnings from either system. If there is a warning that really must be there, try to suppress it (msft suppress with suppression file)

In the TightDbCSharp project there is a CustomDictionary.xml file, this file is referenced as link in the other projects. The file contains
words that FxCop (code analysis) should not warn about as spelling mistakes -  TableView, SubTable etc. The file can be edited in the vs editor as any
other textfile.

Most warnings that are false positives or due to bugs in fxcop has been ignored via a supression file. 
Other warnings are legit, but we have decided not to do something about them. These kinds of warnings are suppressed in the source file, often with
comments detailing why we suppress them.
